
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
class Node{
    int data;
    Node next;
}

class Linkedlist{
    Node head;

    public void insert(int data){
        Node node = new Node();
        node.data = data;
        if (head == null){
            head = node;
        }
        else {
            Node n = head;
            while (n.next != null){
                n = n.next;
            }
            n.next = node;
        }
    }

    public void addfirst(int data){
        Node node = new Node();
        node.data = data;
        node.next = head;
        head = node;
    }
    public void printvalues(){
        Node n = head;
        while (n != null){
            System.out.println(n.data);
            n = n.next;
        }
    }

    public void deleteFirst(){
        if(head != null) {
            head = head.next;
        }
    }

    public void deleteLast(){
        if(head == null){
            System.out.println("Linked list is empty");
            return;

        }else if(head.next == null){
            head = null;

        }else {
            Node current = head;
            while (current.next.next != null){
                current = current.next;
            }
            current.next = null;
        }
    }

    public void deleteNthNodeFromEnd(Integer n){
        if (head.next == null){
            return;
        }

        Integer steps = 0;
        Node current = head;
        while (current != null){
            current = current.next;
            steps++;
        }

        if (n > steps){
            return;

        } else if (n == steps) {
            head = head.next;
            return;
        }

        Node previous = head;
        Integer index = steps - n;

        for (int i = 1; i < index; i++) {
            previous = previous.next;
        }
        previous.next = previous.next.next;

    }


}
public class Main {
    public static void main(String[] args) {
        LinkedList<Integer> lis = new LinkedList<Integer>();
        Linkedlist list = new Linkedlist();
        list.insert(1);
        list.insert(2);
        list.insert(3);
        // Printing the linked list
        list.printvalues();
        list.deleteNthNodeFromEnd(3);
        list.printvalues();
    }
}
